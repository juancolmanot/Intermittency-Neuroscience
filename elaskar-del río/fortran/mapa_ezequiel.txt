!**************************************************************
!
! **** CALCULA UN MAPA 1D DE LA FORMA NORMAL TIPO II 
!      PROPUESTA POR E. DEL RIO **** 
!
!      Junio 2009
!
!**************************************************************

				     
    program Main
      
	implicit none
      
	integer i, j, k, l, ll, ns, ke, kt, imex

	integer ntotiter, inec, mns, sua

    real*8	delta, epsi, yder, lmedia, lmedia1, lg, lgt, lmediap

	real*8	mfun, vaz, mfuna, vaza, pi, vx, cte1, ae, xr
																  
    real*8	x, y, xint, xmin, xmax, inter, lgts, xh, lgte

	real*8	xden, yden, xfue, yfue, aa, lambda, gamma, ws

	real*8  mfungen, vazgen, mfunagen, vazagen, lmedia_e, lmedia_s

    double precision,allocatable, dimension(:) :: yd, xi, prob, dprob, val, valm, lolate, valma

	double precision,allocatable, dimension(:) :: fm, funpro, dispro, lonlam, xa, prolam, fms

	double precision,allocatable, dimension(:) :: valml, fmp, lolates, fmpa, longpro, probr, ge

	double precision,allocatable, dimension(:) :: probgen, valgen, funprogen, fmpgen, fmpagen
	
	
	
!	Archives and formats

    open (unit=10,file='y vs x.dat',status='unknown', form='formatted', access='sequential')

    open (unit=15,file='derivada.dat',status='unknown', form='formatted', access='sequential')

    open (unit=20,file='iterativo.dat',status='unknown', form='formatted', access='sequential')

	open (unit=25,file='y vs num_iter.dat',status='unknown', form='formatted', access='sequential')

    open (unit=30,file='reinyeccion.dat',status='unknown', form='formatted', access='sequential')

	open (unit=35,file='ptos reinject y long lam.dat',status='unknown', form='formatted', access='sequential')
	
	open (unit=36,file='ptos reinj y long lam teoricas.dat',status='unknown', form='formatted', access='sequential')

	open (unit=37,file='ptos reinj y long lam teor sergio.dat',status='unknown', form='formatted', access='sequential')

    open (unit=40,file='para matematica.dat',status='unknown', form='formatted', access='sequential')

    open (unit=50,file='probabilidad.dat',status='unknown', form='formatted', access='sequential')

    open (unit=51,file='probabilidad real.dat',status='unknown', form='formatted', access='sequential')
   
    open (unit=52,file='densidad de probabilidad.dat',status='unknown', form='formatted', access='sequential')
    
	open (unit=53,file='densidad de probabilidad_alternativa.dat',status='unknown', form='formatted', access='sequential')
	 
    open (unit=54,file='valor medio estadistico (-pinf,i).dat',status='unknown', form='formatted', access='sequential')

	open (unit=55,file='valor medio estadistico puntos_i.dat',status='unknown', form='formatted', access='sequential')
	 
    open (unit=56,file='funcion probabilidad (-pinf,i).dat',status='unknown', form='formatted', access='sequential')

	open (unit=57,file='valor medio estadistico (0,i).dat',status='unknown', form='formatted', access='sequential')

    open (unit=58,file='funcion probabilidad (0,i).dat',status='unknown', form='formatted', access='sequential')

    open (unit=60,file='funcion N.dat',status='unknown', form='formatted', access='sequential')
	
	open (unit=61,file='funcion M1.dat',status='unknown', form='formatted', access='sequential')
	
	open (unit=62,file='funcion M de reinyección _ alternativa 1.dat',status='unknown', form='formatted', access='sequential')

    open (unit=70,file='valor medio aritmetico.dat',status='unknown', form='formatted', access='sequential')

	open (unit=80,file='numero puntos reinjectados.dat',status='unknown', form='formatted', access='sequential')

	open (unit=90,file='probabilidad longitudes laminares.dat',status='unknown', form='formatted', access='sequential')

	open (unit=135,file='longitud laminar media estadistica (0,i).dat',status='unknown', form='formatted', access='sequential')

	open (unit=136,file='long laminar media est prob cte (0,i).dat',status='unknown', form='formatted', access='sequential')

	open (unit=137,file='longitud laminar media estadistica (0,i) programa.dat',status='unknown', form='formatted', access='sequential')

	open (unit=138,file='longitud laminar media estadistica (0,i) ezequiel.dat',status='unknown', form='formatted', access='sequential')

	open (unit=139,file='longitud laminar media estadistica (0,i) sergio.dat',status='unknown', form='formatted', access='sequential')

	open (unit=157,file='valor medio estadistico (0,i)-a.dat',status='unknown', form='formatted', access='sequential')

    open (unit=158,file='funcion probabilidad (0,i)-a.dat',status='unknown', form='formatted', access='sequential')

    open (unit=162,file='funcion M de reinyección _ alternativa 2.dat',status='unknown', form='formatted', access='sequential')

	open (unit=170,file='Probabilidad general total.dat',status='unknown', form='formatted', access='sequential')

	open (unit=172,file='Valor medio general total.dat',status='unknown', form='formatted', access='sequential')

	open (unit=174,file='valor medio estadistico total (0,i).dat',status='unknown', form='formatted', access='sequential')

    open (unit=176,file='funcion probabilidad total (0,i).dat',status='unknown', form='formatted', access='sequential')

	open (unit=178,file='funcion M total _ alternativa 1.dat',status='unknown', form='formatted', access='sequential')

	open (unit=180,file='funcion M total _ alternativa 2.dat',status='unknown', form='formatted', access='sequential')


!
!    **** DIMENSIONAMIENTO DE LOS VECTORES ****
!
	
	pi = 3.14159265359d0

    ntotiter = 500000 !numero total de iteraciones
	ns = 1000 !numero de subintervalos

    lambda = 3.0d0     !es p en la ec. de Ezequiel
	cte1 = 0.00135d0   !esta relaconada con lambda
	ae = 0.010526d0    !esta relaconada con lambda 

	aa = 1.0d0
	epsi = 0.1d0
	gamma = 5.0d0

	

	allocate (yd(ntotiter))
	allocate (lonlam(ntotiter))
	allocate (lolate(ntotiter))
	allocate (lolates(ntotiter))
	allocate (prolam(ns))
	allocate (xi(ns))
	allocate (xa(ns))
	allocate (prob(ns))
	allocate (probgen(ns))
	allocate (dprob(ns))
	allocate (dispro(ns))
	allocate (funpro(ns))
	allocate (funprogen(ns))
	allocate (val(ns))
	allocate (valgen(ns))
	allocate (valm(ns))
	allocate (valma(ns))
	allocate (valml(ns))
	allocate (fm(ns))
	allocate (fms(ns))
	allocate (fmp(ns))
	allocate (fmpa(ns))
	allocate (fmpgen(ns))
	allocate (fmpagen(ns))
	allocate (longpro(ns))
	allocate (probr(ns))
	allocate (ge(ns))


!
!    **** DEFINICION DE LA ECUACION LOGISTICA ****
!



!
!    **** CALCULO DEL MAPA COMPLETO ****
!	
      
	inec = 1 !indica si hace falta que grabe la curva y su derivada


!    xr = ((-2.d0)*(3.d0**(1./3.)) + (2.d0)*(3.d0**(1./3.))*(epsi**2.) + 2.d0**(1./3.) * (9.d0-18.d0*epsi+9.d0*(epsi**2.)+sqrt(3.d0)*sqrt((-1.d0)*((-1.d0+epsi)**3.)*(31.d0-15.d0*epsi+12.d0*(epsi**2.)+4.d0*(epsi**3.))))**(2./3.)) / ((6.d0**(2./3.))*(-1.d0+epsi)*(9.d0-18.d0*epsi+9.d0*(epsi**2.)+sqrt(3.d0)*sqrt((-1.d0)*((-1.d0+epsi)**3.)*(31.d0-15.d0*epsi+12.d0*(epsi**2.)+4.d0*(epsi**3.))))**(1./3.))
    
!	xr = -xr 

!	print *, 'xr =', xr

		
	if (inec .eq. 1) then

	  inter = 1.d0 / 1000.d0

	  do i = 1, 1501

        x = -0.3D0 + (i-1) * inter

        y = (1.d0+epsi)*x + (1.d0-epsi)*(x**lambda)  
	    yder = (1.d0+epsi) + lambda*(1.d0-epsi)*(x**(lambda-1.))  
     
	    if(y .gt. 1.d0) then
		  y = (y-1.d0)**gamma
		  yder = gamma * (((1.d0+epsi)*x + (1.d0-epsi)*(x**lambda -1.d0))**(gamma-1.)) * ((1.d0+epsi) + lambda*(1.d0-epsi)*(x**(lambda-1.)))    
        end if 


!		if(x .le. xr) then
!          y = (1.d0+epsi)*x + (1.d0-epsi)*(x**lambda)  
!		  yder = (1.d0+epsi) + lambda*(1.d0-epsi)*(x**(lambda-1.))  
!        end if 

!		if(x > xr) then
!          y = ((1.d0+epsi)*x + (1.d0-epsi)*(x**lambda) - 1.d0)**gamma 
!		  yder = gamma * (((1.d0+epsi)*x + (1.d0-epsi)*(x**lambda -1.d0))**(gamma-1.)) * ((1.d0+epsi) + lambda*(1.d0-epsi)*(x**(lambda-1.)))    
!        end if 


!	    yder = -(1.d0+epsi) - 3.d0*aa*(x**2) + lambda*(x**6)*(dcos(x)) + 6.d0*lambda*(x**5)*(dsin(x)) 
	  	    
	    write (10,100) x, y, x
	    write (15,100) x, yder, x

	  end do

	end if



!
! **** COMIENZA PROCESO ITERATIVO
!


	j = 1
	k = 0
	l = 0
	ll = 0
	
	ke = 0
  
	x = 0.2d0   ! debe ser mayor que xint
   
	print *, 'x =', x



333 continue


!    if(x .le. xr) then
!       y = (1.d0+epsi)*x + (1.d0-epsi)*(x**lambda)  
!    end if 

!    if(x > xr) then
!       y = ((1.d0+epsi)*x + (1.d0-epsi)*(x**lambda) -1.d0)**gamma 
!    end if 


     y = (1.d0+epsi)*x + (1.d0-epsi)*(x**lambda)  

	 if(y .gt. 1.d0) then
		y = (y-1.d0)**gamma
     end if 


!
!   DEFINIMOS INTERVALO "LAMINAR" ALREDEDOR DEL PTO. DE EQUILIBRIO
!


    xint = 0.05d0 

	xmax = xint
	xmin = 0.d0


!
!   DIVIDIMOS EL INTERVALO LAMINAR EN NS SUBINTERVALOS
!


	delta = (xmax - xmin) / (1.d0*ns)

	xi(1) = xmin + 0.5d0 * delta

!	xi(1) = xmin + 0.001*delta 

	do i = 1,ns
	  xi(i+1) = xi(i) + delta
	end do


!
!   CALCULAMOS LA PROBABILIDAD GENERAL
!


	do i = 1,ns 
      if(y .ge. xi(i)) then
	    if(y .lt. xi(i+1)) then
	      probgen(i) = probgen(i) + 1.d0
	      valgen(i) = valgen(i) + y  !suma todos los valores de "y" que estan en cada subintervalo
	    end if
	  end if
	end do

!	print *, 'j =', j
!    print *, 'probgen(25) =', probgen(25)
!	print *, 'probgen(427) =', probgen(427)
!	pause


	if (j .eq. j/1.d0*1.d0) then

!      write (20,202) x, y, j

	end if

!	write (25,204) j, y   ! archivo 25 es "y vs num_iter.txt"


!
!   DEFINIMOS INTERVALO "LAMINAR" ALREDEDOR DEL PTO. DE EQUILIBRIO
!


!    xint = xr 

!	xmax = xint
!	xmin = 0.d0

    
	if (j .eq. 1) then 
      print *, 'xmax =', xmax
	  print *, 'xmin =', xmin
	  print *, 'xint =', xint
	end if

	
	if (x .ge. xmax .or. x .le. xmin) then
	  if (y .ge. xmin .and. y .le. xmax) then
	    yden = y  !valor de "y" reinyectado en la zona laminar usando como centro de cordendas el punto (dx,dy)
	    xden = x  !valor de "x" fuera de la zona laminar desde el cual reingresa "y" a la zona laminar usando como centro de cordendas el punto (dx,dy)
	    k = j
	    ke = ke + 1
		yd(ke) = y !valor de "y" reinyectado en la zona laminar usando como centro de cordendas el punto (dx,dy)
		write (40,200) xden, yden   ! archivo 40 es "para matematica.txt"

		lolate(ke) = (dlog(xint/abs(yden)) - 0.5d0*dlog((aa*xint*xint+epsi)/(aa*yden*yden+epsi))) / epsi  
        ! lolate es la longitud laminar teorica dada por ec.(1) paper Kim de 1998

		lolates(ke) = (dlog(xint/abs(yden)) - 0.5d0*dlog((aa*xint*xint+0.5d0*epsi)/(aa*yden*yden+0.5d0*epsi))) / (0.5d0)*epsi  
        ! lolate es la longitud laminar teorica calculada por mi


	  end if
	end if


	if (y .ge. xmax .or. y .le. xmin) then
	  if (x .ge. xmin .and. x .le. xmax) then
	    yfue = y
	    xfue = x  !valor de "x" dentro de la zona laminar desde el cual "y" sale de la zona laminar usando como centro de cordendas el punto (dx,dy)
	    l = j
	    ll = l - k
		lonlam(ke) = ll	  ! longitud del estado laminar
	    write (30,300) xfue, yfue, ll, k, l, yden, yfue   ! archivo 30 es "reinyeccion.txt"
	  end if
	end if

!	write (40,202) xden, yden, ll

	x = y

	j = j + 1

    if(j .eq. j/1000000*1000000) print *, 'j =', j

    if (j .le. ntotiter) then 
	  goto 333 
	end if

!
!   CALCULO DE LA PROBABILIDAD GLOBAL Y VALOR MEDIO GLOBAL 
!   SIN IMPORTAR SI ES DE REINYECCION O NO
!


	do i = 1,ns
	  if(probgen(i) > 0.0) then
	    valgen(i) = valgen(i)/probgen(i)  !promedio aritmetico de los valores de "y" que estan en cada subintervalo
        probgen(i) = probgen(i)/(1.d0*ntotiter) !probabilidad total general en cada subintervalo sin considerar si hay reinyección
	  end if

	  if(probgen(i) .eq. 0.0) then
	    valgen(i) = 0.d0  
        probgen(i) = 0.d0
	  end if

	end do


    funprogen(1) = probgen(1)

	do i = 2,ns
		funprogen(i) = funprogen(i-1) + probgen(i)  !funcion probabilidad en el intervalo (0,i)
	end do


    mfunagen = 0.d0
	vazagen = 0.d0

    mfungen = 0.d0
	vazgen = 0.d0

   
    do j = 1,ns

  	   mfunagen = mfunagen + probgen(j)
	   vazagen = vazagen + valgen(j)*probgen(j)

       if (mfunagen .gt. 0.0) then
	      fmpagen(j) = vazagen/mfunagen   ! funcion M total, integra entre el punto de equilibrio y el limite superior. 
								 ! UNA ALTERNATIVA DE CALCULO
	   end if
				
	   if (mfunagen .eq. 0.0) then
          fmpagen(j) = 0.d0   !funcion M total
	   end if

	  
	   mfungen = funprogen(j) ! - funprogen(1)
	   vazgen = vazgen + valgen(j)*probgen(j) !- valgen(1)*probgen(1)

	   if (mfungen .gt. 0.0) then
	     fmpgen(j) = vazgen/mfungen   !funcion M total, integra entre el punto de equilibrio y el limite superior
                                	  ! OTRA ALTERNATIVA DE CALCULO

	   end if
				
	   if (mfungen .eq. 0.0) then
         fmpgen(j) = 0.d0   !funcion M total
	   end if

	   write (174,100) xi(j), vazgen    !valor medio estadistico (0,i) total.txt'

	   write (176,100) xi(j), mfungen   !funcion probabilidad (0,i) total.txt'
			    
	   write (178,400) j, xi(j), fmpgen(j) 	!función M total (alternativa 1)

	   write (180,400) j, xi(j), fmpagen(j)	!función M total (alternativa 2)

     end do


	  
!
!   COMIENZA CALCULO DE VARIABLES REINYECTADAS
!


	kt = ke  !numero de puntos reinyectados
	print *, 'numero de puntos reinyectados =', kt 

	lmedia_e = 0.d0

	write (80,800) kt

	do j = 1, kt
	  write (35,200) yd(j), lonlam(j)  ! archivo 35 es "ptos reinject y long lam.txt"
	  write (36,200) yd(j), lolate(j)  ! archivo 36 es "ptos reinj y long lam teoricas.txt"
	  write (37,200) yd(j), lolates(j)  ! archivo 36 es "ptos reinj y long lam teoricas.txt"

	  lmedia_e = lmedia_e + lonlam(j)

	end do

	lmedia_e = lmedia_e / (1.d0*kt)

	write (138,700) lmedia_e
	print *, 'lmedia_e =', lmedia_e

!
!
! **** LONGITUD DE INTERVALOS LAMINARES ****
!
!

	sua = 10 !amplitud de cada subintervalo donde se promedia la longitud laminar


    do i = 1,ns+1,sua

!	  print *, 'i = ', i
	   
      xa(i) = 0.5d0 + (i-1) * 1.d0   ! establece los intervalos en los que 
	                                 ! pueden estar las distintas longitudes laminares
	end do

	
    do j = 1,kt
 	  do i = 1,ns,sua
		
	    if(lonlam(j) .ge. xa(i)) then  
!	      if(lonlam(j) .lt. xa(i+1)) then
	      if(lonlam(j) .lt. xa(i+sua)) then

!			print *, 'i = ', i

	        prolam(i) = prolam(i) + 1.d0  ! probabilidad de la longitud del estado laminar
			longpro(i) = longpro(i) + lonlam(j)
				
!			print *, 'prolam = ', prolam(i)

	      end if
	    end if
	  end do
	end do


!    print *, 'paso 1'
			
	do i = 1,ns
	   if(prolam(i) > 0) then
	     longpro(i) = longpro(i)/prolam(i)
	   end if
	   if(prolam(i) .eq. 0) then
	     longpro(i) = 0.d0
	   end if	  
	end do

	do i = 1,ns,sua 
       prolam(i) = prolam(i)/kt ! probabilidad de la longitud del estado laminar
	   ws = (2.d0*i+sua)/2.d0
!	   write (90,204) i, prolam(i) ! archivo 90 es "probabilidad longitudes laminares.txt"
   	   write (90,200) ws, prolam(i)/(1.d0*sua) ! archivo 90 es "probabilidad longitudes laminares.txt"
	end do

!	lmediap = 0.d0
!	mns = 2 + (ns/2)

!	do i = mns-1,ns
!       lmediap = lmediap + prolam(i)*0.5d0*(xa(i)+xa(i+1)) ! probabilidad de la longitud del estado laminar
!	   write (137,200) xa(i), lmediap ! archivo 137 es "longitud laminar media segun programa.txt"
!	end do



!
!
! **** CALCULO DE LA FUNCION DISTRIBUCION DE PROBABILIDAD DE PUNTOS REINYECTADOS ****
!
!


!   DIVIDIMOS EL INTERVALO LAMINAR EN NS SUBINTERVALOS


!	delta = (xmax - xmin) / (1.d0*ns)

!	xi(1) = xmin + 0.5d0 * delta

!	do i = 1,ns
!	  xi(i+1) = xi(i) + delta
!	end do

!
!
!   BUSCAMOS EN QUE SUBINTERVALO HAN CAIDO LOS PUNTOS REINYECTADOS
!
!

    do j = 1,kt
	  do i = 1,ns 
	    if(yd(j) .ge. xi(i)) then
	      if(yd(j) .lt. xi(i+1)) then
	        prob(i) = prob(i) + 1.d0
	        val(i) = val(i) + yd(j)  !suma todos los valores de "y" que estan en cada subintervalo
!	      	longpro(i) = longpro(i) + lonlam(j)
		  end if
	    end if
	  end do
	end do


!    print *, 'paso 2'

	do i = 1,ns
	  if(prob(i) > 0.0) then
	    val(i) = val(i)/prob(i)  !promedio aritmetico de los valores de "y" que estan en cada subintervalo
!		longpro(i) = longpro(i)/prob(i) !promedio aritmetico de los valores de "longitud laminar" en cada subintervalo
        prob(i) = prob(i)/(1.d0*kt)
	  end if

	  if(prob(i) .eq. 0.0) then
	    val(i) = 0.d0  !promedio de los valores de "y" que estan en cada subintervalo
        prob(i) = 0.d0
	  end if
	  write (70,200) xi(i), val(i)  ! archivo 70 es "valor medio aritmetico.txt"
	end do

	do i = 1,ns
	  probr(i) = prob(i)*ns/(xmax-xmin)  !probabilidad real para intervalo xmax-xmin
	end do
      
    funpro(1) = prob(1)

	do i = 2,ns
        dprob(i) = (prob(i) - prob(i-1)) / delta  !funcion densidad de probabilidad
		funpro(i) = funpro(i-1) + prob(i)  !funcion probabilidad en el intervalo (0,i)
	end do

	dprob(1) = dprob(2)

!    print *, 'paso 3'


!   CALCULO DE LA LONGITUD LAMINAR MEDIA ESTADISTICA

	lmedia = 0.d0
	lmedia1 = 0.d0
	
!    mns = 2 + (ns/2)

    mns = 2 

	do i = mns-1,ns

		if(i .eq. mns-1) then
		  xh = xi(i)
		end if
		
		if(i .ne. mns-1) then
		  xh = xi(i) - xi(mns-1)
		end if
		
!	    lg = (dlog(xint/abs(xh)) - 0.5d0*dlog((aa*xint*xint+epsi)/(aa*xh*xh+epsi))) / epsi  

	    lg = (dlog(xint/abs(xh)) - 0.5d0*dlog((aa*(xint**(lambda-1.))+epsi)/(aa*(xh**(lambda-1.))+epsi))) / epsi  
				
        lmedia = lmedia + prob(i) * lg
		lmedia_s = lmedia_s + longpro(i)/ns

!       lmedia = lmedia + prob(i) * lonlam(i); !no se puede utilizar porque hay que calcular 
                                                !lonlam de i, porque lonlam esta definda para 
												!cada punto de reinjeccion
		
		lmedia1 = lmedia1 + lg/(ns+1.d0) 

		write (135,200) xi(i), lmedia	 !funcion longotud media en el intervalo (0,i)

		write (139,200) xi(i), lmedia_s	 !funcion longotud media en el intervalo (0,i) de Sergio

		write (136,200) xi(i), lmedia1	 !funcion longotud media en el intervalo (0,i) con probabilidad uniforme
		
	end do

	
	print *, 'lmedia_s =', lmedia_s
	print *, 'lmedia =', lmedia


!   CALCULO DE LA LONGITUD LAMINAR MEDIA ESTADISTICA TEORICA PARA PROBABILIDAD = CTE

	vx = (sqrt(epsi))/xint
!	lgt = (-0.5d0/epsi)*dlog10(1.d0+vx*vx) + (0.5d0/vx)*(pi-2.d0*datan(vx)+(dlog10(1.d0+vx*vx))/vx) 
	
	lgt = (datan(xint*sqrt(aa/epsi)))/(xint*sqrt(aa*epsi)) !ecuacion (3) paper de Kim de 1998

!   lgts es la longitud media deducida por Sergio 
!	lgts = cte1 * xmax**(1+ae)*((1/epsi)-(aa*(xmax**2.)/(epsi**2.))+(0.5d0*(aa**2.)*(xmax**4.)/(epsi**3.)))/((1.d0+ae)*(3.d0+ae))
	
!   lgte es la longitud media deducida por Ezequiel
 	lgte = (0.5d0*cte1*pi/(aa*(ae+1))) * ((aa/epsi)**(0.5*(1.d0-ae))) * datan(0.5d0*pi*ae)

	print *, 'longitud estadistica teorica =', lgt
!	print *, 'longitud estadistica teorica sergio=', lgts
!	print *, 'longitud estadistica teorica ezequiel=', lgte


!
!   CALCULO ALTERNATIVO DE LA FUNCION DE DISTRIBUCION DE PROBABLIDAD
!


	do i = 2,ns
        dispro(i) = (funpro(i) - funpro(i-1)) / delta  ! funcion densidad de probabilidad 
		                                               ! ¿(otra forma de calcularla)?
	end do


!	valm(1) = val(1)*prob(1)*delta
	valm(1) = val(1)*prob(1)
	valml(1) = valm(i)

	do i = 2,ns
!	  valm(i) = valm(i-1) + val(i)*prob(i)*delta ! valor medio en el intervalo (0,i)
	  valm(i) = valm(i-1) + val(i)*prob(i) ! valor medio en el intervalo (0,i)
	  valml(i) = val(i)*prob(i) ! valor medio en el punto i
	end do

	do i = 1,ns
      write (50,200) xi(i), prob(i)	 !funcion probabilidad de reinyección en el intervalo i
      write (51,200) xi(i), probr(i) !funcion probabilidad real de reinyección en el intervalo i
	  write (52,200) xi(i), dprob(i) !funcion densidad de probabilidad en el intervalo i
	  write (53,200) xi(i), dispro(i) !funcion densidad de probabilidad en el intervalo i - calculo alternativo
	  write (54,200) xi(i), valm(i)  !valor medio estadistico en el intervalo (0,i)
	  write (55,200) xi(i), valml(i)  !valor medio estadistico en el intervalo (0,i)
	  write (56,200) xi(i), funpro(i) !funcion probabilidad en el intervalo (0,i)
	  write (170,200) xi(i), probgen(i)	 !funcion probabilidad total en el intervalo i
	  write (172,200) xi(i), valgen(i)  !valor medio estadistico total en el intervalo i
	end do


    do i = 1,ns
	  if (funpro(i) > 0.0) then
        fm(i) = valm(i)/funpro(i)   !funcion N definida por mi
	  end if

	  if (funpro(i) .eq. 0.0) then
        fm(i) = 0.d0   !funcion N definida por mi
	  end if

	  write (60,100) xi(i), fm(i) 	!archivo de salida "funcion M.txt"
	end do

	
    do j = mns-1,ns

!	  if(xi(j) .ge. 0.0) then

		 mfun = funpro(j) - funpro(mns-2)
		 vaz = valm(j) - valm(mns-2)

	     if (mfun .gt. 0.0) then
		   fmp(j) = vaz/mfun   !funcion M de reinyección, integra entre el punto de equilibrio y el limite superior
		                       ! ALTERNATIVA 1 
	     end if
				
	     if (mfun .eq. 0.0) then
           fmp(j) = 0.d0   !funcion M
	     end if

	     write (57,100) xi(j), vaz    !valor medio estadistico (0,i).txt'

		 write (58,100) xi(j), mfun   !funcion probabilidad (0,i).txt'
			    
	     write (62,400) j, xi(j), fmp(j) 

!	  end if

	end do


!   CALCULO ALTERNATIVO DE Mprima

	mfuna = 0.d0
	vaza = 0.d0

    do j = mns-1,ns
	  
		 mfuna = mfuna + prob(j)
		 vaza = vaza + val(j)*prob(j)

	     if (mfuna .gt. 0.0) then
		   fmpa(j) = vaza/mfuna   !funcion M de reinyección, integra entre el punto de equilibrio y el limite superior
		                          ! ALTERNATIVA 2
	     end if
				
	     if (mfuna .eq. 0.0) then
           fmpa(j) = 0.d0   !funcion Mprima
	     end if

	     write (157,100) xi(j), vaza    !valor medio estadistico (0,i).txt'

		 write (158,100) xi(j), mfuna   !funcion probabilidad (0,i).txt'
			    
	     write (162,100) xi(j), fmpa(j) 

	end do



! programo otra interpretacion de la funcion M que satisface la ec.(6) de Ezequiel (pag 2174).
! Desataco que la funcion fm no satisface esta ecuacion y los limites de integracion son (xmin,x), 
! donde x llega hasta xmax 



    imex = 19

	if(imex .eq. 1) then

	  do i = mns-1,ns

  	    k = i+1-mns

	    valma(mns+k-1) = 0.d0

        do l = mns-k, i
	      valma(mns+k-1) = valma(mns+k-1) + valml(l)
	    end do
	        
        valma(mns+k-1) = valma(mns+k-1) / (2.d0*k)  !valor medio aritmetico en el intervalo (mns-k,i) 
	  
	    fms(i) = valma(mns+k-1)/(funpro(i) - funpro(mns-k)) !nueva funcion M con limites de integracion (-x,x)
	  
	    write (61,100) xi(i), fms(i) 
  
      end do

	end if



100   format(F18.8, 3X, F18.8, 3X, F18.8)
200   format(F18.8, 3X, F18.8)
202   format(F18.8, 3X, F18.8, 3X, I10)
204   format(I10, 3X, F18.8)
300   format(2F18.8, 3I10, 2F18.8)
400	  format(I10, 3X, F18.8, 3X, F18.8)
700   format(F18.8)
800   format(I10)


	close(10)
	close(15)
	close(20)
	close(25)
	close(30)
	close(35)
	close(36)
	close(37)
	close(40)
	close(50)
	close(51)
	close(52)
	close(53)
	close(54)
	close(55)
	close(56)
	close(57)
	close(58)
	close(60)
	close(61)
	close(62)
	close(70)
	close(80)
	close(90)
	close(135)
	close(136)
	close(137)
	close(138)
	close(139)
	close(157)
	close(158)
	close(162)
	close(170)
	close(172)
	close(174)
	close(176)
	close(178)
	close(180)

    stop

    end program
