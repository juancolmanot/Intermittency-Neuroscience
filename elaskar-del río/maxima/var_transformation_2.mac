declare([x1, y1, x, y, u, v, u1, v1, theta], noun)$
declare([a, b], constant)$

Fxy: x1 = 4 * a * x * (1 - x) + b * y * (1 - x)$
Gxy: y1 = 4 * a * y * (1 - y) + b * x * (1 - y)$

tu: u = cos(theta) * x + sin(theta) * y$
tv: v = -sin(theta) * x + cos(theta) * y$

tu1: u1 = x1 + y1$
tv1: v1 = x1 - y1$

[x_sol, y_sol]: solve([tu, tv], [x, y])[1]$
[x_sol1, y_sol1]: solve([tu1, tv1], [x1, y1])[1]$


Fxy: subst(x_sol, x, Fxy)$
Fxy: subst(y_sol, y, Fxy)$
Fxy: subst(rhs(x_sol1), x1, Fxy)$
Fxy: subst(rhs(y_sol1), y1, Fxy)$
Fxy: lhs(Fxy) = rhs(rhs(rhs(Fxy)))$

Gxy: subst(x_sol, x, Gxy)$
Gxy: subst(y_sol, y, Gxy)$
Gxy: subst(rhs(x_sol1), x1, Gxy)$
Gxy: subst(rhs(y_sol1), y1, Gxy)$
Gxy: lhs(Gxy) = rhs(rhs(rhs(Gxy)))$

Fxy: ratsimp(Fxy)$
Gxy: ratsimp(Gxy)$

u1_F: solve(Fxy, u1)[1]$
v1_F: solve(Fxy, v1)[1]$
u1_G: solve(Gxy, u1)[1]$
v1_G: solve(Gxy, v1)[1]$

Uxy: rhs(v1_F) = rhs(v1_G)$
Vxy: rhs(u1_F) = rhs(u1_G)$

Uxy: solve(Uxy, u1)[1]$
Vxy: solve(Vxy, v1)[1]$

Uxy: ratsimp(Uxy)$
Vxy: ratsimp(Vxy)$

F_terms: expand(rhs(Uxy))$
G_terms: expand(rhs(Vxy))$

n_terms_F: length(F_terms)$
n_terms_G: length(G_terms)$

F_terms_list: []$
G_terms_list: []$

for i: 1 thru n_terms_F do (
	numer: num(part(F_terms, i)),
	den: denom(part(F_terms, i)),
	den: factor(den),
	den: subst((sin(theta))^2 + (cos(theta))^2 = 1, den),
	term_value: [numer/den],
	F_terms_list: append(F_terms_list, term_value)
)$

for i: 1 thru n_terms_G do (
	numer: num(part(G_terms, i)),
	den: denom(part(G_terms, i)),
	den: factor(den),
	den: subst((sin(theta))^2 + (cos(theta))^2 = 1, den),
	term_value: [numer/den],
	G_terms_list: append(G_terms_list, term_value)
)$

grouped_terms_F: [0, 0, 0, 0, 0]$
grouped_terms_G: [0, 0, 0, 0, 0]$

for i: 1 thru n_terms_F do (
	term: F_terms_list[i],
	if not coeff(term, v, 2) = 0 then (
		grouped_terms_F[1]: grouped_terms_F[1] + term
	)
	elseif not coeff(term, v, 1) = 0 and coeff(term, u, 1) = 0 then (
		grouped_terms_F[2]: grouped_terms_F[2] + term
	)
	elseif not coeff(term, v, 1) = 0 and not coeff(term, u, 1) = 0 then (
		grouped_terms_F[3]: grouped_terms_F[3] + term
	)
	elseif not coeff(term, u, 2) = 0 then (
		grouped_terms_F[4]: grouped_terms_F[4] + term
	)
	elseif not coeff(term, u, 1) = 0 and coeff(term, u, 1) = 0 then (
		grouped_terms_F[5]: grouped_terms_F[5] + term
	)
)$

for i: 1 thru n_terms_G do (
	term: G_terms_list[i],
	if not coeff(term, v, 2) = 0 then (
		grouped_terms_G[1]: grouped_terms_G[1] + term
	)
	elseif not coeff(term, v, 1) = 0 and coeff(term, u, 1) = 0 then (
		grouped_terms_G[2]: grouped_terms_G[2] + term
	)
	elseif not coeff(term, v, 1) = 0 and not coeff(term, u, 1) = 0 then (
		grouped_terms_G[3]: grouped_terms_G[3] + term
	)
	elseif not coeff(term, u, 2) = 0 then (
		grouped_terms_G[4]: grouped_terms_G[4] + term
	)
	elseif not coeff(term, u, 1) = 0 and coeff(term, u, 1) = 0 then (
		grouped_terms_G[5]: grouped_terms_G[5] + term
	)
)$

Uxy: u1 = 0$
Vxy: v1 = 0$

for i: 1 thru length(grouped_terms_F) do (
	grouped_terms_F[i]: factor(grouped_terms_F[i]),
	grouped_terms_G[i]: factor(grouped_terms_G[i]),
	numer1: num(grouped_terms_F[i]),
	den1: denom(grouped_terms_F[i]),
	numer2: num(grouped_terms_G[i]),
	den2: denom(grouped_terms_G[i]),
	grouped_terms_F[i]: factor(numer1) / den1,
	grouped_terms_G[i]: factor(numer2) / den2,
	Uxy: u1 = rhs(Uxy) + grouped_terms_F[i],
	Vxy: v1 = rhs(Vxy) + grouped_terms_G[i]
)$

cross_term_F:grouped_terms_F[3]$
cross_term_G:grouped_terms_G[3]$
cross_term_F: coeff(cross_term_F, v, 1)$
cross_term_G: coeff(cross_term_G, v, 1)$
cross_term_F: coeff(cross_term_F, u, 1)$
cross_term_G: coeff(cross_term_G, u, 1)$

cross_term_F: cross_term_F = 0$
cross_term_G: cross_term_G = 0$

theta_root_F: solve(cross_term_F, theta)$
theta_root_G: solve(cross_term_G, theta)$



for i: 1 thru length(grouped_terms_F) do (
	grouped_terms_F[i]: subst((sin(theta))^2 + (cos(theta))^2 = 1, grouped_terms_F[i]),
	print("Fi: ", grouped_terms_F[i])
)$

for i: 1 thru length(grouped_terms_G) do (
	grouped_terms_G[i]: subst((sin(theta))^2 + (cos(theta))^2 = 1, grouped_terms_G[i]),
	print("Gi: ", grouped_terms_G[i])
)$

theta_roots: [0, 0.25 * %pi, 0.5 * %pi, %pi, 1.25 * %pi, 1.5 * %pi, 1.75 * %pi, 2 * %pi]$

for i: 1 thru length(theta_roots) do (
	print("---------------------------------------------------------------------------"),
	print(subst(theta=theta_roots[i], rhs(Uxy))),
	print(subst(theta=theta_roots[i], rhs(Vxy)))
		
)$



