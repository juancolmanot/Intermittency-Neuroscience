declare([x1, y1, x, y, u, v, u1, v1], noun)$
declare([a, b, A, B, C, D], constant)$

Fxy: x1 = 4 * a * x * (1 - x) + b * y * (1 - x)$
Gxy: y1 = 4 * a * y * (1 - y) + b * x * (1 - y)$

tu: u = A * x + B * y$
tv: v = C * x + D * y$

tu1: u1 = A * x1 + B * y1$
tv1: v1 = C * x1 + D * y1$

[x_sol, y_sol]: solve([tu, tv], [x, y])[1]$
[x_sol1, y_sol1]: solve([tu1, tv1], [x1, y1])[1]$


Fxy: subst(x_sol, x, Fxy)$
Fxy: subst(y_sol, y, Fxy)$
Fxy: subst(rhs(x_sol1), x1, Fxy)$
Fxy: subst(rhs(y_sol1), y1, Fxy)$
Fxy: lhs(Fxy) = rhs(rhs(rhs(Fxy)))$
Gxy: subst(x_sol, x, Gxy)$
Gxy: subst(y_sol, y, Gxy)$
Gxy: subst(rhs(x_sol1), x1, Gxy)$
Gxy: subst(rhs(y_sol1), y1, Gxy)$
Gxy: lhs(Gxy) = rhs(rhs(rhs(Gxy)))$

Fxy: ratsimp(Fxy)$
Gxy: ratsimp(Gxy)$

u1_F: solve(Fxy, u1)[1]$
v1_F: solve(Fxy, v1)[1]$
u1_G: solve(Gxy, u1)[1]$
v1_G: solve(Gxy, v1)[1]$

Uxy: rhs(v1_F) = rhs(v1_G)$
Vxy: rhs(u1_F) = rhs(u1_G)$

Uxy: solve(Uxy, u1)[1]$
Vxy: solve(Vxy, v1)[1]$

Uxy: ratsimp(Uxy)$
Vxy: ratsimp(Vxy)$

F_terms: expand(Uxy)$
G_terms: expand(Vxy)$

print("Terms of Uxy:")$
for term in F_terms do
	print(term)$

print("Terms of Vxy:")$
for term in G_terms do
	print(term)$
